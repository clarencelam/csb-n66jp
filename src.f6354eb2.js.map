{"version":3,"sources":["src/clam.js","src/input.js","src/food.js","src/customer.js","src/gameMechanics.js","src/index.js"],"names":["Clam","gameWidth","gameHeight","img","document","getElementById","GAMEWIDTH","GAMEHEIGHT","x_pos","y_pos","size","x_speed","y_speed","moving_left","moving_right","moving_up","moving_down","shooting","ctx","deg","save","rad","Math","PI","translate","rotate","drawImage","deltaTime","restore","InputHandler","clam","addEventListener","event","keyCode","console","log","Food","x","y","image","init_speed","speed_depricator","fade_time","fade_depricator","marked_for_deletion","food_hit","hunger_fill","customer","stop","time","Date","getSeconds","getMilliseconds","Customer","img_frame1","img_frame2","speed","return_speed","turned_around","hunger_points","markfordelete","hit","min","max","rndInt","x_direction","walking","stopped","x_walk_threshold","wait_time","bullet","newtime","s","scale","setTransform","apply_return_speed","detectCollision","object","topOfBullet","bottomOfBullet","leftOfBullet","rightOfBullet","topOfObject","bottomOfObject","leftOfObject","rightOfObject","detectOverlapCollision","foodShrink","biteSize","incrementalAction","funct","millisec","terminate_function","intervalId","setInterval","clearInterval","eatFood","hungerpoints","canvas","getContext","GAME_WIDTH","GAME_HEIGHT","randomIntFromInterval","floor","random","background","bullets","customers","cust","push","lastTime","fireBullet","gameLoop","timestamp","clearRect","filter","forEach","index","update","draw","length","hitFood","eatTime","hitCustomer","requestAnimationFrame"],"mappings":"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","file":"src.f6354eb2.js","sourceRoot":"..","sourcesContent":["export default class Clam {\r\n  constructor(gameWidth, gameHeight) {\r\n    this.img = document.getElementById(\"clam_default\");\r\n    this.GAMEWIDTH = gameWidth;\r\n    this.GAMEHEIGHT = gameHeight;\r\n    this.x_pos = gameWidth / 2;\r\n    this.y_pos = gameHeight / 3;\r\n    this.size = 75;\r\n    this.x_speed = 5;\r\n    this.y_speed = 4;\r\n\r\n    this.moving_left = false;\r\n    this.moving_right = false;\r\n    this.moving_up = false;\r\n    this.moving_down = false;\r\n\r\n    this.shooting = false;\r\n  }\r\n\r\n  rotateClam(ctx, deg) {\r\n    ctx.save();\r\n    var rad = (deg * Math.PI) / 180;\r\n    ctx.translate(this.x_pos + this.size / 2, this.y_pos + this.size / 2);\r\n    ctx.rotate(rad);\r\n    ctx.drawImage(this.img);\r\n  }\r\n\r\n  update(deltaTime) {\r\n    if (!deltaTime) return;\r\n\r\n    if (this.moving_left === true && this.x_pos > 0) {\r\n      this.x_pos = this.x_pos - this.x_speed;\r\n    }\r\n    if (this.moving_right === true && this.x_pos < this.GAMEWIDTH - this.size) {\r\n      this.x_pos = this.x_pos + this.x_speed;\r\n    }\r\n    if (this.moving_up === true && this.y_pos > 0) {\r\n      this.y_pos = this.y_pos - this.y_speed;\r\n    }\r\n    if (this.moving_down === true && this.y_pos < this.GAMEHEIGHT - this.size) {\r\n      this.y_pos = this.y_pos + this.y_speed;\r\n    }\r\n    //if (this.angle_up === true) {\r\n    //;\r\n  }\r\n\r\n  draw(ctx) {\r\n    // Draw the clam to the screen. If it is shooting, draw its shooting animation\r\n    if (this.shooting === true) {\r\n      ctx.save();\r\n      // Tilts the clam 30 degrees when shooting\r\n      var rad = (30 * Math.PI) / 180;\r\n      ctx.translate(this.x_pos + this.size / 2, this.y_pos + this.size / 2);\r\n      ctx.rotate(rad);\r\n      ctx.drawImage(\r\n        this.img,\r\n        (this.size / 2) * -1,\r\n        (this.size / 2) * -1,\r\n        this.size,\r\n        this.size\r\n      );\r\n      ctx.restore();\r\n    } else {\r\n      ctx.drawImage(this.img, this.x_pos, this.y_pos, this.size, this.size);\r\n    }\r\n  }\r\n}\r\n","import { fireBullet } from \"/src/index\";\r\n\r\nexport default class InputHandler {\r\n  constructor(clam) {\r\n    document.addEventListener(\"keydown\", (event) => {\r\n      switch (event.keyCode) {\r\n        case 37:\r\n          clam.moving_left = true;\r\n          break;\r\n        case 39:\r\n          clam.moving_right = true;\r\n          break;\r\n        case 38:\r\n          clam.moving_up = true;\r\n          break;\r\n        case 40:\r\n          clam.moving_down = true;\r\n          break;\r\n        case 32:\r\n          // Shoot a bullet\r\n          fireBullet();\r\n          clam.shooting = true;\r\n          break;\r\n        default:\r\n          console.log(\"Error - keydown not recognized\");\r\n      }\r\n    });\r\n    document.addEventListener(\"keyup\", (event) => {\r\n      switch (event.keyCode) {\r\n        case 37:\r\n          clam.moving_left = false;\r\n          break;\r\n        case 39:\r\n          clam.moving_right = false;\r\n          break;\r\n        case 38:\r\n          clam.moving_up = false;\r\n          break;\r\n        case 40:\r\n          clam.moving_down = false;\r\n          break;\r\n        case 32:\r\n          clam.shooting = false;\r\n          break;\r\n        default:\r\n          console.log(\"Error - keyup not recognized\");\r\n      }\r\n    });\r\n  }\r\n}\r\n","export default class Food {\r\n  // Class to represent the food objects used as bullets in the game\r\n  constructor(x, y) {\r\n    this.image = document.getElementById(\"nigiri_img\");\r\n    this.x_pos = x;\r\n    this.y_pos = y;\r\n    this.size = 50;\r\n    this.init_speed = 10;\r\n    this.speed_depricator = 0.2;\r\n    this.fade_time = 180;\r\n    this.fade_depricator = 1;\r\n    this.marked_for_deletion = false;\r\n    this.food_hit = false;\r\n    this.hunger_fill = 1;\r\n  }\r\n\r\n  hitCustomer(customer) {\r\n    // actions when food hits customer\r\n    // below if-block ensures the food is actually over the customer image before both stop\r\n    this.stop();\r\n  }\r\n\r\n  stop() {\r\n    // make the food stop moving\r\n    this.speed_depricator = this.init_speed;\r\n  }\r\n\r\n  draw(ctx) {\r\n    // Draw the food with a spin effect\r\n    var time = new Date();\r\n    ctx.save();\r\n    ctx.translate(this.x_pos + this.size / 2, this.y_pos + this.size / 2);\r\n    ctx.rotate(\r\n      ((2 * Math.PI) / 6) * time.getSeconds() +\r\n        ((2 * Math.PI) / 6000) * time.getMilliseconds()\r\n    );\r\n    ctx.drawImage(\r\n      this.image,\r\n      (this.size / 2) * -1,\r\n      (this.size / 2) * -1,\r\n      this.size,\r\n      this.size\r\n    );\r\n    ctx.restore();\r\n  }\r\n\r\n  update(deltaTime) {\r\n    //depracate speed to 0 to stop the food\r\n    if (this.init_speed > 0) {\r\n      this.init_speed = this.init_speed - this.speed_depricator;\r\n    } else {\r\n      this.init_speed = 0;\r\n    }\r\n\r\n    //deprecate fade_time to 0 to signal when to remove the food from scrn\r\n    if (this.fade_time > 0) {\r\n      this.fade_time = this.fade_time - this.fade_depricator;\r\n    } else {\r\n      this.fade_time = 0;\r\n      this.marked_for_deletion = true;\r\n    }\r\n    this.x_pos += this.init_speed;\r\n  }\r\n}\r\n","import { randomIntFromInterval, incrementalAction } from \"/src/index\";\r\nexport default class Customer {\r\n  // class to represent the cusomter fish that player will feed\r\n\r\n  constructor(gameHeight, gameWidth) {\r\n    this.img_frame1 = document.getElementById(\"fish_1\");\r\n    this.img_frame2 = document.getElementById(\"fish_2\");\r\n    this.size = 80;\r\n    this.speed = 4;\r\n    this.return_speed = 5;\r\n    this.turned_around = false;\r\n    this.hunger_points = 10;\r\n    this.markfordelete = false;\r\n    this.GAMEWIDTH = gameWidth;\r\n    this.hit = false;\r\n    this.hunger_points = 10;\r\n\r\n    this.min = 0;\r\n    this.max = gameHeight * 0.75;\r\n    const rndInt = randomIntFromInterval(this.min, this.max);\r\n\r\n    this.x_pos = gameWidth - this.size;\r\n    this.x_direction = -1; //heading left to start\r\n    this.y_pos = rndInt;\r\n\r\n    //CUSTOMER STATES\r\n    this.walking = true;\r\n    this.stopped = false;\r\n\r\n    // variable to declare where the customer will stop & turn around\r\n    this.x_walk_threshold = this.size * 2;\r\n    // time waited after customer gets to walk threshold\r\n    this.wait_time = 150;\r\n  }\r\n\r\n  hitFood(bullet) {\r\n    this.stop();\r\n  }\r\n\r\n  stop() {\r\n    this.speed = 0;\r\n    this.walking = false;\r\n    this.stopped = true;\r\n  }\r\n\r\n  apply_return_speed() {\r\n    this.speed = this.return_speed;\r\n  }\r\n\r\n  draw(ctx) {\r\n    // swap the image frames per second when cust is walking\r\n    const newtime = new Date();\r\n    let s = newtime.getMilliseconds();\r\n    if (this.walking === true) {\r\n      if (s < 500) {\r\n        this.img = this.img_frame1;\r\n      } else {\r\n        this.img = this.img_frame2;\r\n      }\r\n    }\r\n\r\n    if (this.turned_around === true) {\r\n      ctx.translate(this.x_pos + this.size, this.y_pos);\r\n      // scaleX by -1; this \"trick\" flips horizontally\r\n      ctx.scale(-1, 1);\r\n      // draw the img\r\n      // no need for x,y since we've already translated\r\n      ctx.drawImage(this.img, 0, 0, this.size, this.size);\r\n      // always clean up -- reset transformations to default\r\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n    } else {\r\n      ctx.drawImage(this.img, this.x_pos, this.y_pos, this.size, this.size);\r\n    }\r\n  }\r\n\r\n  update(deltaTime) {\r\n    if (this.hunger_points <= 0) {\r\n      console.log(\"customer hunger at 0\");\r\n      this.markfordelete = true;\r\n    }\r\n    // If customer is at x_walk_threshold, wait for this.wait_time, then return to the right\r\n    if (this.x_pos <= this.x_walk_threshold) {\r\n      if (this.wait_time > 0) {\r\n        this.speed = 0;\r\n        this.walking = false;\r\n        this.wait_time = this.wait_time - 1;\r\n      }\r\n      if (this.wait_time <= 0 && this.stopped !== true) {\r\n        this.apply_return_speed();\r\n        this.turned_around = true;\r\n        this.x_direction = 1;\r\n        this.walking = true;\r\n      }\r\n    }\r\n    this.x_pos = this.x_pos + this.speed * this.x_direction;\r\n\r\n    if (this.turned_around === true && this.x_pos > this.GAMEWIDTH) {\r\n      this.markfordelete = true;\r\n      console.log(\"turnaround triggered\");\r\n    }\r\n  }\r\n}\r\n","// function detectCollision returns true if bullet is within object\r\nexport function detectCollision(bullet, object) {\r\n  let topOfBullet = bullet.y_pos;\r\n  let bottomOfBullet = bullet.y_pos + bullet.size;\r\n  let leftOfBullet = bullet.x_pos;\r\n  let rightOfBullet = bullet.x_pos + bullet.size;\r\n\r\n  let topOfObject = object.y_pos;\r\n  let bottomOfObject = object.y_pos + object.size;\r\n  let leftOfObject = object.x_pos;\r\n  let rightOfObject = object.x_pos + object.size;\r\n\r\n  if (\r\n    bottomOfBullet > topOfObject && // bottom of bullet is under the top of obj\r\n    topOfBullet < bottomOfObject &&\r\n    rightOfBullet > leftOfObject &&\r\n    leftOfBullet < rightOfObject\r\n  ) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport function detectOverlapCollision(bullet, object) {\r\n  let topOfBullet = bullet.y_pos;\r\n  let bottomOfBullet = bullet.y_pos + bullet.size;\r\n  let leftOfBullet = bullet.x_pos;\r\n  let rightOfBullet = bullet.x_pos + bullet.size;\r\n\r\n  let topOfObject = object.y_pos;\r\n  let bottomOfObject = object.y_pos + object.size;\r\n  let leftOfObject = object.x_pos;\r\n  let rightOfObject = object.x_pos + object.size;\r\n\r\n  if (\r\n    bottomOfBullet < bottomOfObject && // bottom of bullet is under the top of obj\r\n    topOfBullet > topOfObject &&\r\n    leftOfBullet > leftOfObject\r\n  ) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport function foodShrink(bullet) {\r\n  const biteSize = 10;\r\n  bullet.size = bullet.size - biteSize;\r\n  bullet.x_pos = bullet.x_pos + biteSize / 2;\r\n  bullet.y_pos = bullet.y_pos + biteSize / 2;\r\n  console.log(bullet.size);\r\n}\r\n\r\nexport function incrementalAction(funct, millisec, terminate_function) {\r\n  var intervalId = setInterval(funct, millisec);\r\n  if (terminate_function) {\r\n    clearInterval(intervalId);\r\n  }\r\n}\r\n\r\nexport function eatFood(customer, bullet) {\r\n  customer.hungerpoints = customer.hunger_points - bullet.hunger_fill;\r\n}\r\n","import Clam from \"/src/clam\";\nimport InputHandler from \"/src/input\";\nimport Food from \"/src/food\";\nimport Customer from \"/src/customer\";\nimport {\n  detectCollision,\n  foodShrink,\n  detectOverlapCollision,\n  incrementalAction,\n  eatFood\n} from \"/src/gameMechanics\";\n\nlet canvas = document.getElementById(\"gameScreen\");\nlet ctx = canvas.getContext(\"2d\");\n\nconst GAME_WIDTH = 1200;\nconst GAME_HEIGHT = 800;\n\nexport function randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nlet background = document.getElementById(\"background\");\nlet clam = new Clam(GAME_WIDTH, GAME_HEIGHT);\nlet bullets = [];\n\n// create customer list and add one\nlet customers = [];\nlet cust = new Customer(GAME_HEIGHT, GAME_WIDTH);\ncustomers.push(cust);\n\nlet lastTime = 0;\nnew InputHandler(clam);\n\nexport function fireBullet() {\n  bullets.push(new Food(clam.x_pos, clam.y_pos));\n}\n\nfunction gameLoop(timestamp) {\n  let deltaTime = timestamp - lastTime;\n  lastTime = timestamp;\n\n  ctx.clearRect(0, 0, GAME_WIDTH, GAME_HEIGHT);\n  ctx.drawImage(background, 0, 0, 1200, 800);\n\n  // update and draw customer objects\n  customers = customers.filter((customer) => !customer.markfordelete);\n  customers.forEach((customer, index) => {\n    customer.update(deltaTime);\n    customer.draw(ctx);\n  });\n  // reload customers array (temporary code, will flesh out cust gen)\n  if (customers.length < 1) {\n    customers.push(new Customer(GAME_HEIGHT, GAME_WIDTH));\n  }\n\n  // update and draw bullets\n  bullets = bullets.filter((bullet) => !bullet.marked_for_deletion);\n\n  // COLLISION DETECTION AND ACTIONS //\n\n  bullets.forEach((bullet, index) => {\n    customers.forEach((customer, index) => {\n      // checks if the food is done colliding (needs to get into range)\n      if (detectOverlapCollision(bullet, customer)) {\n        if (customer.hit === false) {\n          // perform bullet & customer's post-hit actions\n          console.log(\"customer_hit\");\n          customer.hit = true;\n          customer.hitFood(bullet);\n\n          var eatTime = setInterval(custEat, 750);\n\n          function custEat() {\n            const fill_points = 2;\n            customer.hunger_points = customer.hunger_points - fill_points;\n            console.log(customer.hunger_points);\n\n            if (customer.hunger_points <= 0) {\n              clearInterval(eatTime);\n            }\n          }\n        }\n\n        if (bullet.food_hit === false) {\n          // flag to prevent multiple triggers\n          bullet.food_hit = true;\n          bullet.hitCustomer(customer);\n\n          var intervalId = setInterval(biteShrink, 750);\n\n          function biteShrink() {\n            const biteSize = 10;\n            bullet.size = bullet.size - biteSize;\n            bullet.x_pos = bullet.x_pos + biteSize / 2;\n            bullet.y_pos = bullet.y_pos + biteSize / 2;\n\n            if (bullet.size <= 0) {\n              clearInterval(intervalId);\n            }\n          }\n        }\n      }\n    });\n    bullet.update(deltaTime);\n    bullet.draw(ctx);\n  });\n  clam.update(deltaTime);\n  clam.draw(ctx);\n\n  requestAnimationFrame(gameLoop);\n}\ngameLoop();\n"]}