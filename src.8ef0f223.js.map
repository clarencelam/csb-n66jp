{"version":3,"sources":["src/clam.js","src/input.js","src/food.js","src/customer.js","src/gameMechanics.js","src/index.js"],"names":["Clam","gameWidth","gameHeight","img","document","getElementById","flipped_img","GAMEWIDTH","GAMEHEIGHT","x_pos","y_pos","size","x_speed","y_speed","moving_left","moving_right","moving_up","moving_down","facing","shooting","deltaTime","ctx","deg","save","rad","Math","PI","translate","rotate","drawImage","restore","drawShootingTilt","InputHandler","clam","addEventListener","event","keyCode","console","log","Food","x","y","image","init_speed","speed_depricator","fade_time","fade_depricator","marked_for_deletion","food_hit","hunger_fill","customer","stop","time","Date","getSeconds","getMilliseconds","Customer","img_frame1","img_frame2","speed","return_speed","turned_around","hunger_points","markfordelete","hit","min","max","rndInt","x_direction","y_direction","walking","stopped","x_walk_threshold","wait_time","apply_return_speed","bullet","newtime","s","scale","setTransform","doneEating","detectCollision","object","topOfBullet","bottomOfBullet","leftOfBullet","rightOfBullet","topOfObject","bottomOfObject","leftOfObject","rightOfObject","detectOverlapCollision","foodShrink","biteSize","incrementalAction","funct","millisec","terminate_function","intervalId","setInterval","clearInterval","eatFood","hungerpoints","canvas","getContext","GAME_WIDTH","GAME_HEIGHT","randomIntFromInterval","floor","random","background","bullets","customers","cust","push","lastTime","fireBullet","gameLoop","timestamp","clearRect","filter","forEach","index","update","draw","length","hitFood","eatTime","hitCustomer","shrinkAmount","requestAnimationFrame"],"mappings":"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","file":"src.8ef0f223.js","sourceRoot":"..","sourcesContent":["export default class Clam {\r\n  constructor(gameWidth, gameHeight) {\r\n    this.img = document.getElementById(\"clam_flipped\");\r\n    this.flipped_img = document.getElementById(\"clam_flipped\");\r\n    this.GAMEWIDTH = gameWidth;\r\n    this.GAMEHEIGHT = gameHeight;\r\n    this.x_pos = gameWidth / 2;\r\n    this.y_pos = gameHeight / 3;\r\n    this.size = 75;\r\n    this.x_speed = 5;\r\n    this.y_speed = 4;\r\n\r\n    this.moving_left = false;\r\n    this.moving_right = false;\r\n    this.moving_up = false;\r\n    this.moving_down = false;\r\n\r\n    this.facing = 1; // 1 = facing right, -1 = facing left\r\n\r\n    this.shooting = false;\r\n  }\r\n\r\n  update(deltaTime) {\r\n    if (!deltaTime) return;\r\n\r\n    if (this.moving_left === true && this.x_pos > 0) {\r\n      this.x_pos = this.x_pos - this.x_speed;\r\n      this.facing = -1; // set facing left\r\n    }\r\n    if (this.moving_right === true && this.x_pos < this.GAMEWIDTH - this.size) {\r\n      this.x_pos = this.x_pos + this.x_speed;\r\n      this.facing = 1; // set facing right\r\n    }\r\n    if (this.moving_up === true && this.y_pos > 0) {\r\n      this.y_pos = this.y_pos - this.y_speed;\r\n    }\r\n    if (this.moving_down === true && this.y_pos < this.GAMEHEIGHT - this.size) {\r\n      this.y_pos = this.y_pos + this.y_speed;\r\n    }\r\n    //if (this.angle_up === true) {\r\n    //;\r\n  }\r\n\r\n  drawShootingTilt(ctx, deg) {\r\n    ctx.save();\r\n    var rad = (deg * Math.PI) / 180;\r\n    ctx.translate(this.x_pos + this.size / 2, this.y_pos + this.size / 2);\r\n    ctx.rotate(rad);\r\n\r\n    ctx.drawImage(\r\n      this.img,\r\n      (this.size / 2) * -1,\r\n      (this.size / 2) * -1,\r\n      this.size,\r\n      this.size\r\n    );\r\n    ctx.restore();\r\n  }\r\n\r\n  draw(ctx) {\r\n    // Draw the clam to the screen. If it is shooting, draw its shooting animation\r\n    switch (true) {\r\n      case this.facing === 1 && this.shooting === true: // facing right, shooting\r\n        this.drawShootingTilt(ctx, 30);\r\n        break;\r\n      case this.facing === 1 && this.shooting === false: // facing right, not shooting\r\n        ctx.drawImage(this.img, this.x_pos, this.y_pos, this.size, this.size);\r\n        break;\r\n      case this.facing === -1 && this.shooting === true: // facing left, shooting\r\n        ctx.drawImage(\r\n          this.flipped_img,\r\n          this.x_pos,\r\n          this.y_pos,\r\n          this.size,\r\n          this.size\r\n        );\r\n        break;\r\n      case this.facing === -1 && this.shooting === false: // facing left, not shooting\r\n        ctx.drawImage(\r\n          this.flipped_img,\r\n          this.x_pos,\r\n          this.y_pos,\r\n          this.size,\r\n          this.size\r\n        );\r\n        break;\r\n      default:\r\n        ctx.drawImage(this.img, this.x_pos, this.y_pos, this.size, this.size);\r\n    }\r\n  }\r\n}\r\n/*\r\n    if (this.facing === -1) {\r\n      if (this.shooting === true) {\r\n        this.makeFacingLeft(ctx);\r\n        this.drawShootingTilt(ctx, 30);\r\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n      } else {\r\n        this.makeFacingLeft(ctx);\r\n        ctx.drawImage(this.img, 0, 0, this.size, this.size);\r\n        ctx.setTransform(1, 0, 0, 1, 0, 0); // IMPORTANT -- sets the context back to normal\r\n      }\r\n      this.makeFacingLeft(ctx);\r\n      ctx.drawImage(this.img, 0, 0, this.size, this.size);\r\n      ctx.setTransform(1, 0, 0, 1, 0, 0); // IMPORTANT -- sets the context back to normal\r\n    } else {\r\n      ctx.drawImage(this.img, this.x_pos, this.y_pos, this.size, this.size);\r\n    }\r\n\r\n    if (this.shooting === true) {\r\n      // this.shootingAnimation()\r\n      this.drawShootingTilt(ctx, 30);\r\n    } else {\r\n      ctx.drawImage(this.img, this.x_pos, this.y_pos, this.size, this.size);\r\n    }\r\n  }\r\n}\r\n*/\r\n","import { fireBullet } from \"/src/index\";\r\n\r\nexport default class InputHandler {\r\n  constructor(clam) {\r\n    document.addEventListener(\"keydown\", (event) => {\r\n      switch (event.keyCode) {\r\n        case 37:\r\n          clam.moving_left = true;\r\n          break;\r\n        case 39:\r\n          clam.moving_right = true;\r\n          break;\r\n        case 38:\r\n          clam.moving_up = true;\r\n          break;\r\n        case 40:\r\n          clam.moving_down = true;\r\n          break;\r\n        case 32:\r\n          // Shoot a bullet\r\n          fireBullet();\r\n          clam.shooting = true;\r\n          break;\r\n        default:\r\n          console.log(\"Error - keydown not recognized\");\r\n      }\r\n    });\r\n    document.addEventListener(\"keyup\", (event) => {\r\n      switch (event.keyCode) {\r\n        case 37:\r\n          clam.moving_left = false;\r\n          break;\r\n        case 39:\r\n          clam.moving_right = false;\r\n          break;\r\n        case 38:\r\n          clam.moving_up = false;\r\n          break;\r\n        case 40:\r\n          clam.moving_down = false;\r\n          break;\r\n        case 32:\r\n          clam.shooting = false;\r\n          break;\r\n        default:\r\n          console.log(\"Error - keyup not recognized\");\r\n      }\r\n    });\r\n  }\r\n}\r\n","export default class Food {\r\n  // Class to represent the food objects used as bullets in the game\r\n  constructor(x, y) {\r\n    this.image = document.getElementById(\"nigiri_img\");\r\n    this.x_pos = x;\r\n    this.y_pos = y;\r\n    this.size = 50;\r\n    this.init_speed = 10;\r\n    this.speed_depricator = 0.2;\r\n    this.fade_time = 180;\r\n    this.fade_depricator = 1;\r\n    this.marked_for_deletion = false;\r\n    this.food_hit = false;\r\n    this.hunger_fill = 1;\r\n  }\r\n\r\n  hitCustomer(customer) {\r\n    // actions when food hits customer\r\n    // below if-block ensures the food is actually over the customer image before both stop\r\n    this.stop();\r\n  }\r\n\r\n  stop() {\r\n    // make the food stop moving\r\n    this.speed_depricator = this.init_speed;\r\n  }\r\n\r\n  draw(ctx) {\r\n    // Draw the food with a spin effect\r\n    var time = new Date();\r\n    ctx.save();\r\n    ctx.translate(this.x_pos + this.size / 2, this.y_pos + this.size / 2);\r\n    ctx.rotate(\r\n      ((2 * Math.PI) / 6) * time.getSeconds() +\r\n        ((2 * Math.PI) / 6000) * time.getMilliseconds()\r\n    );\r\n    ctx.drawImage(\r\n      this.image,\r\n      (this.size / 2) * -1,\r\n      (this.size / 2) * -1,\r\n      this.size,\r\n      this.size\r\n    );\r\n    ctx.restore();\r\n  }\r\n\r\n  update(deltaTime) {\r\n    //depracate speed to 0 to stop the food\r\n    if (this.init_speed > 0) {\r\n      this.init_speed = this.init_speed - this.speed_depricator;\r\n    } else {\r\n      this.init_speed = 0;\r\n    }\r\n\r\n    //deprecate fade_time to 0 to signal when to remove the food from scrn\r\n    if (this.fade_time > 0) {\r\n      this.fade_time = this.fade_time - this.fade_depricator;\r\n    } else {\r\n      this.fade_time = 0;\r\n      this.marked_for_deletion = true;\r\n    }\r\n    this.x_pos += this.init_speed;\r\n  }\r\n}\r\n","import { randomIntFromInterval, incrementalAction } from \"/src/index\";\r\nexport default class Customer {\r\n  // class to represent the cusomter fish that player will feed\r\n\r\n  constructor(gameHeight, gameWidth) {\r\n    this.img_frame1 = document.getElementById(\"fish_1\");\r\n    this.img_frame2 = document.getElementById(\"fish_2\");\r\n    this.size = 80;\r\n    this.speed = 4;\r\n    this.return_speed = 4;\r\n    this.turned_around = false;\r\n    this.hunger_points = 10;\r\n    this.markfordelete = false;\r\n    this.GAMEWIDTH = gameWidth;\r\n    this.hit = false;\r\n    this.hunger_points = 2;\r\n\r\n    this.min = 0;\r\n    this.max = gameHeight * 0.75;\r\n    const rndInt = randomIntFromInterval(this.min, this.max);\r\n\r\n    this.x_pos = gameWidth - this.size;\r\n    this.y_pos = rndInt;\r\n\r\n    this.x_direction = -1; //heading left to start\r\n    this.y_direction = 0; //no vertical movement to start\r\n\r\n    //CUSTOMER STATES\r\n    this.walking = true;\r\n    this.stopped = false;\r\n\r\n    // variable to declare where the customer will stop & turn around\r\n    this.x_walk_threshold = this.size * 2;\r\n    // time waited after customer gets to walk threshold\r\n    this.wait_time = 150;\r\n  }\r\n\r\n  doneEating() {\r\n    this.y_direction = -1;\r\n    this.walking = true;\r\n    this.stopped = false;\r\n    this.apply_return_speed();\r\n    if (this.y_pos <= 0) {\r\n      this.markfordelete = true;\r\n    }\r\n  }\r\n\r\n  hitFood(bullet) {\r\n    this.stop();\r\n  }\r\n\r\n  stop() {\r\n    this.speed = 0;\r\n    this.walking = false;\r\n    this.stopped = true;\r\n  }\r\n\r\n  apply_return_speed() {\r\n    this.speed = this.return_speed;\r\n  }\r\n\r\n  draw(ctx) {\r\n    // swap the image frames per second when cust is walking\r\n    const newtime = new Date();\r\n    let s = newtime.getMilliseconds();\r\n    if (this.walking === true) {\r\n      if (s < 500) {\r\n        this.img = this.img_frame1;\r\n      } else {\r\n        this.img = this.img_frame2;\r\n      }\r\n    }\r\n\r\n    if (this.turned_around === true) {\r\n      ctx.translate(this.x_pos + this.size, this.y_pos);\r\n      // scaleX by -1; this \"trick\" flips horizontally\r\n      ctx.scale(-1, 1);\r\n      // draw the img\r\n      // no need for x,y since we've already translated\r\n      ctx.drawImage(this.img, 0, 0, this.size, this.size);\r\n      // always clean up -- reset transformations to default\r\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n    } else {\r\n      ctx.drawImage(this.img, this.x_pos, this.y_pos, this.size, this.size);\r\n    }\r\n  }\r\n\r\n  update(deltaTime) {\r\n    if (this.hunger_points <= 0) {\r\n      console.log(\"customer hunger at 0\");\r\n      this.doneEating();\r\n    }\r\n\r\n    // If customer is at x_walk_threshold, wait for this.wait_time, then return to the right\r\n    if (this.x_pos <= this.x_walk_threshold) {\r\n      if (this.wait_time > 0) {\r\n        this.speed = 0;\r\n        this.walking = false;\r\n        this.wait_time = this.wait_time - 1;\r\n      }\r\n      if (this.wait_time <= 0 && this.stopped !== true) {\r\n        this.apply_return_speed();\r\n        this.turned_around = true;\r\n        this.x_direction = 1;\r\n        this.walking = true;\r\n      }\r\n    }\r\n\r\n    // Movement\r\n    this.x_pos = this.x_pos + this.speed * this.x_direction;\r\n    this.y_pos = this.y_pos + this.speed * this.y_direction;\r\n\r\n    if (this.turned_around === true && this.x_pos > this.GAMEWIDTH) {\r\n      this.markfordelete = true;\r\n    }\r\n  }\r\n}\r\n","// function detectCollision returns true if bullet is within object\r\nexport function detectCollision(bullet, object) {\r\n  let topOfBullet = bullet.y_pos;\r\n  let bottomOfBullet = bullet.y_pos + bullet.size;\r\n  let leftOfBullet = bullet.x_pos;\r\n  let rightOfBullet = bullet.x_pos + bullet.size;\r\n\r\n  let topOfObject = object.y_pos;\r\n  let bottomOfObject = object.y_pos + object.size;\r\n  let leftOfObject = object.x_pos;\r\n  let rightOfObject = object.x_pos + object.size;\r\n\r\n  if (\r\n    bottomOfBullet > topOfObject && // bottom of bullet is under the top of obj\r\n    topOfBullet < bottomOfObject &&\r\n    rightOfBullet > leftOfObject &&\r\n    leftOfBullet < rightOfObject\r\n  ) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport function detectOverlapCollision(bullet, object) {\r\n  let topOfBullet = bullet.y_pos;\r\n  let bottomOfBullet = bullet.y_pos + bullet.size;\r\n  let leftOfBullet = bullet.x_pos;\r\n  let rightOfBullet = bullet.x_pos + bullet.size;\r\n\r\n  let topOfObject = object.y_pos;\r\n  let bottomOfObject = object.y_pos + object.size;\r\n  let leftOfObject = object.x_pos;\r\n  let rightOfObject = object.x_pos + object.size;\r\n\r\n  if (\r\n    bottomOfBullet < bottomOfObject + object.size / 2 && // bottom of bullet is under the top of obj\r\n    topOfBullet > topOfObject - object.size / 2 &&\r\n    leftOfBullet > leftOfObject &&\r\n    leftOfBullet < rightOfObject\r\n  ) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport function foodShrink(bullet) {\r\n  const biteSize = 10;\r\n  bullet.size = bullet.size - biteSize;\r\n  bullet.x_pos = bullet.x_pos + biteSize / 2;\r\n  bullet.y_pos = bullet.y_pos + biteSize / 2;\r\n  console.log(bullet.size);\r\n}\r\n\r\nexport function incrementalAction(funct, millisec, terminate_function) {\r\n  var intervalId = setInterval(funct, millisec);\r\n  if (terminate_function) {\r\n    clearInterval(intervalId);\r\n  }\r\n}\r\n\r\nexport function eatFood(customer, bullet) {\r\n  customer.hungerpoints = customer.hunger_points - bullet.hunger_fill;\r\n}\r\n","import Clam from \"/src/clam\";\nimport InputHandler from \"/src/input\";\nimport Food from \"/src/food\";\nimport Customer from \"/src/customer\";\nimport {\n  detectCollision,\n  foodShrink,\n  detectOverlapCollision,\n  incrementalAction,\n  eatFood\n} from \"/src/gameMechanics\";\n\nlet canvas = document.getElementById(\"gameScreen\");\nlet ctx = canvas.getContext(\"2d\");\n\nconst GAME_WIDTH = 1200;\nconst GAME_HEIGHT = 800;\n\nexport function randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nlet background = document.getElementById(\"background\");\nlet clam = new Clam(GAME_WIDTH, GAME_HEIGHT);\nlet bullets = [];\n\n// create customer list and add one\nlet customers = [];\nlet cust = new Customer(GAME_HEIGHT, GAME_WIDTH);\ncustomers.push(cust);\n\nlet lastTime = 0;\nnew InputHandler(clam);\n\nexport function fireBullet() {\n  bullets.push(new Food(clam.x_pos, clam.y_pos));\n}\n\nfunction gameLoop(timestamp) {\n  let deltaTime = timestamp - lastTime;\n  lastTime = timestamp;\n\n  ctx.clearRect(0, 0, GAME_WIDTH, GAME_HEIGHT);\n  ctx.drawImage(background, 0, 0, 1200, 800);\n\n  // update and draw customer objects\n  customers = customers.filter((customer) => !customer.markfordelete);\n  customers.forEach((customer, index) => {\n    customer.update(deltaTime);\n    customer.draw(ctx);\n  });\n  // reload customers array (temporary code, will flesh out cust gen)\n  if (customers.length < 1) {\n    customers.push(new Customer(GAME_HEIGHT, GAME_WIDTH));\n  }\n\n  // update and draw bullets\n  bullets = bullets.filter((bullet) => !bullet.marked_for_deletion);\n\n  // COLLISION DETECTION AND ACTIONS //\n\n  bullets.forEach((bullet, index) => {\n    customers.forEach((customer, index) => {\n      // checks if the food is done colliding (needs to get into range)\n      if (detectOverlapCollision(bullet, customer)) {\n        if (customer.hit === false) {\n          // perform bullet & customer's post-hit actions\n          console.log(\"customer_hit\");\n          customer.hit = true;\n          customer.hitFood(bullet);\n\n          var eatTime = setInterval(custEat, 750);\n\n          function custEat() {\n            const fill_points = 1;\n            customer.hunger_points = customer.hunger_points - fill_points;\n            console.log(customer.hunger_points);\n\n            if (customer.hunger_points <= 0) {\n              clearInterval(eatTime);\n            }\n          }\n        }\n\n        if (bullet.food_hit === false) {\n          // flag to prevent multiple triggers\n          bullet.food_hit = true;\n          bullet.hitCustomer(customer);\n\n          var intervalId = setInterval(biteShrink, 750);\n\n          function biteShrink() {\n            const shrinkAmount = 25;\n            bullet.size = bullet.size - shrinkAmount;\n            bullet.x_pos = bullet.x_pos + shrinkAmount / 2;\n            bullet.y_pos = bullet.y_pos + shrinkAmount / 2;\n\n            if (bullet.size <= 0) {\n              clearInterval(intervalId);\n            }\n          }\n        }\n      }\n    });\n    bullet.update(deltaTime);\n    bullet.draw(ctx);\n  });\n  clam.update(deltaTime);\n  clam.draw(ctx);\n\n  requestAnimationFrame(gameLoop);\n}\ngameLoop();\n"]}